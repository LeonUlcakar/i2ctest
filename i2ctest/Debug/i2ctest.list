
i2ctest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  080042a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004a8  24000014  080042bc  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240004bc  080042bc  000204bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c759  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a22  00000000  00000000  0002c79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a38  00000000  00000000  0002e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000970  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002e207  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d184  00000000  00000000  0005d76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012bd7c  00000000  00000000  0006a8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0019666f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002984  00000000  00000000  001966c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004278 	.word	0x08004278

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	08004278 	.word	0x08004278

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002f6:	f000 f9af 	bl	8000658 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fb2d 	bl	8000958 <HAL_Init>

  /* USER CODE BEGIN Init */
  addressArray[0] = 0;
 80002fe:	4b60      	ldr	r3, [pc, #384]	; (8000480 <main+0x190>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f8da 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f97c 	bl	8000604 <MX_GPIO_Init>
  MX_I2C1_Init();
 800030c:	f000 f93a 	bl	8000584 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  instructionArray[0] = 0x30;
 8000310:	4b5c      	ldr	r3, [pc, #368]	; (8000484 <main+0x194>)
 8000312:	2230      	movs	r2, #48	; 0x30
 8000314:	701a      	strb	r2, [r3, #0]
	  instructionArray[1] = 0x0A;
 8000316:	4b5b      	ldr	r3, [pc, #364]	; (8000484 <main+0x194>)
 8000318:	220a      	movs	r2, #10
 800031a:	705a      	strb	r2, [r3, #1]
	  addressArray[0] = 0x06;
 800031c:	4b58      	ldr	r3, [pc, #352]	; (8000480 <main+0x190>)
 800031e:	2206      	movs	r2, #6
 8000320:	701a      	strb	r2, [r3, #0]

	  HAL_StatusTypeDef status0 = HAL_I2C_Master_Transmit(&hi2c1, 0x7f << 1, instructionArray, 2, 50);
 8000322:	2332      	movs	r3, #50	; 0x32
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2302      	movs	r3, #2
 8000328:	4a56      	ldr	r2, [pc, #344]	; (8000484 <main+0x194>)
 800032a:	21fe      	movs	r1, #254	; 0xfe
 800032c:	4856      	ldr	r0, [pc, #344]	; (8000488 <main+0x198>)
 800032e:	f000 ff4d 	bl	80011cc <HAL_I2C_Master_Transmit>
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	  //HAL_Delay(100);
	  HAL_StatusTypeDef status1 = HAL_I2C_Master_Transmit(&hi2c1, 0x7f << 1, addressArray, 1, 50);
 8000336:	2332      	movs	r3, #50	; 0x32
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2301      	movs	r3, #1
 800033c:	4a50      	ldr	r2, [pc, #320]	; (8000480 <main+0x190>)
 800033e:	21fe      	movs	r1, #254	; 0xfe
 8000340:	4851      	ldr	r0, [pc, #324]	; (8000488 <main+0x198>)
 8000342:	f000 ff43 	bl	80011cc <HAL_I2C_Master_Transmit>
 8000346:	4603      	mov	r3, r0
 8000348:	71bb      	strb	r3, [r7, #6]
	  HAL_StatusTypeDef status2 = HAL_I2C_Master_Receive (&hi2c1, 0x7f << 1, receiveArray, 5, 50);
 800034a:	2332      	movs	r3, #50	; 0x32
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2305      	movs	r3, #5
 8000350:	4a4e      	ldr	r2, [pc, #312]	; (800048c <main+0x19c>)
 8000352:	21fe      	movs	r1, #254	; 0xfe
 8000354:	484c      	ldr	r0, [pc, #304]	; (8000488 <main+0x198>)
 8000356:	f001 f851 	bl	80013fc <HAL_I2C_Master_Receive>
 800035a:	4603      	mov	r3, r0
 800035c:	717b      	strb	r3, [r7, #5]
	  rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | (receiveArray[2]);
 800035e:	4b4b      	ldr	r3, [pc, #300]	; (800048c <main+0x19c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	041a      	lsls	r2, r3, #16
 8000364:	4b49      	ldr	r3, [pc, #292]	; (800048c <main+0x19c>)
 8000366:	785b      	ldrb	r3, [r3, #1]
 8000368:	021b      	lsls	r3, r3, #8
 800036a:	4313      	orrs	r3, r2
 800036c:	4a47      	ldr	r2, [pc, #284]	; (800048c <main+0x19c>)
 800036e:	7892      	ldrb	r2, [r2, #2]
 8000370:	4313      	orrs	r3, r2
 8000372:	461a      	mov	r2, r3
 8000374:	4b46      	ldr	r3, [pc, #280]	; (8000490 <main+0x1a0>)
 8000376:	601a      	str	r2, [r3, #0]




	  fpressureData = rawPressureData;
 8000378:	4b45      	ldr	r3, [pc, #276]	; (8000490 <main+0x1a0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	ee07 3a90 	vmov	s15, r3
 8000380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000384:	4b43      	ldr	r3, [pc, #268]	; (8000494 <main+0x1a4>)
 8000386:	edc3 7a00 	vstr	s15, [r3]
	  pressure[i] = fpressureData;
 800038a:	4b43      	ldr	r3, [pc, #268]	; (8000498 <main+0x1a8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a41      	ldr	r2, [pc, #260]	; (8000494 <main+0x1a4>)
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	4942      	ldr	r1, [pc, #264]	; (800049c <main+0x1ac>)
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	601a      	str	r2, [r3, #0]
	  if (fpressureData >= 8388608) {
 800039a:	4b3e      	ldr	r3, [pc, #248]	; (8000494 <main+0x1a4>)
 800039c:	edd3 7a00 	vldr	s15, [r3]
 80003a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80004a0 <main+0x1b0>
 80003a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ac:	db19      	blt.n	80003e2 <main+0xf2>
		  fpressureData2 = (fpressureData - 16777216) / 8388608.0 * calibration;
 80003ae:	4b39      	ldr	r3, [pc, #228]	; (8000494 <main+0x1a4>)
 80003b0:	edd3 7a00 	vldr	s15, [r3]
 80003b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80004a4 <main+0x1b4>
 80003b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80003bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003c0:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000460 <main+0x170>
 80003c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80003c8:	4b37      	ldr	r3, [pc, #220]	; (80004a8 <main+0x1b8>)
 80003ca:	edd3 7a00 	vldr	s15, [r3]
 80003ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80003d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80003d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <main+0x1bc>)
 80003dc:	edc3 7a00 	vstr	s15, [r3]
 80003e0:	e018      	b.n	8000414 <main+0x124>
	  } else {
		  fpressureData2 = fpressureData / 8388608.0 * 40000 * calibration; //delis zaradi max vrednosti
 80003e2:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <main+0x1a4>)
 80003e4:	edd3 7a00 	vldr	s15, [r3]
 80003e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80003ec:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000460 <main+0x170>
 80003f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80003f4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000468 <main+0x178>
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <main+0x1b8>)
 80003fe:	edd3 7a00 	vldr	s15, [r3]
 8000402:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000406:	ee26 7b07 	vmul.f64	d7, d6, d7
 800040a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0x1bc>)
 8000410:	edc3 7a00 	vstr	s15, [r3]
	  }

	  rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <main+0x19c>)
 8000416:	78db      	ldrb	r3, [r3, #3]
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <main+0x19c>)
 800041c:	7912      	ldrb	r2, [r2, #4]
 800041e:	4313      	orrs	r3, r2
 8000420:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <main+0x1c0>)
 8000422:	6013      	str	r3, [r2, #0]
	  ftemperatureData = rawTemperatureData;
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <main+0x1c0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	ee07 3a90 	vmov	s15, r3
 800042c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <main+0x1c4>)
 8000432:	edc3 7a00 	vstr	s15, [r3]
	  trueTemparature = ftemperatureData / 256.0 * 1.2;
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <main+0x1c4>)
 8000438:	edd3 7a00 	vldr	s15, [r3]
 800043c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000440:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000470 <main+0x180>
 8000444:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000448:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000478 <main+0x188>
 800044c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000450:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <main+0x1c8>)
 8000456:	edc3 7a00 	vstr	s15, [r3]
  {
 800045a:	e759      	b.n	8000310 <main+0x20>
 800045c:	f3af 8000 	nop.w
 8000460:	00000000 	.word	0x00000000
 8000464:	41600000 	.word	0x41600000
 8000468:	00000000 	.word	0x00000000
 800046c:	40e38800 	.word	0x40e38800
 8000470:	00000000 	.word	0x00000000
 8000474:	40700000 	.word	0x40700000
 8000478:	33333333 	.word	0x33333333
 800047c:	3ff33333 	.word	0x3ff33333
 8000480:	2400008c 	.word	0x2400008c
 8000484:	24000084 	.word	0x24000084
 8000488:	24000030 	.word	0x24000030
 800048c:	24000094 	.word	0x24000094
 8000490:	2400009c 	.word	0x2400009c
 8000494:	240000a4 	.word	0x240000a4
 8000498:	240004b4 	.word	0x240004b4
 800049c:	240000b4 	.word	0x240000b4
 80004a0:	4b000000 	.word	0x4b000000
 80004a4:	4b800000 	.word	0x4b800000
 80004a8:	24000000 	.word	0x24000000
 80004ac:	240000a8 	.word	0x240000a8
 80004b0:	240000a0 	.word	0x240000a0
 80004b4:	240000ac 	.word	0x240000ac
 80004b8:	240000b0 	.word	0x240000b0

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b09c      	sub	sp, #112	; 0x70
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	224c      	movs	r2, #76	; 0x4c
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fecc 	bl	8004268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2220      	movs	r2, #32
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fec6 	bl	8004268 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <SystemClock_Config+0xc0>)
 80004de:	f04f 32ff 	mov.w	r2, #4294967295
 80004e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004e6:	2004      	movs	r0, #4
 80004e8:	f001 fbbc 	bl	8001c64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ec:	2300      	movs	r3, #0
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <SystemClock_Config+0xc4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a22      	ldr	r2, [pc, #136]	; (8000580 <SystemClock_Config+0xc4>)
 80004f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <SystemClock_Config+0xc4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <SystemClock_Config+0xc4>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000516:	d1f8      	bne.n	800050a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800051c:	2301      	movs	r3, #1
 800051e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000520:	2340      	movs	r3, #64	; 0x40
 8000522:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000524:	2300      	movs	r3, #0
 8000526:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fbf3 	bl	8001d18 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000538:	f000 f8ba 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	233f      	movs	r3, #63	; 0x3f
 800053e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000550:	2340      	movs	r3, #64	; 0x40
 8000552:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800055a:	2340      	movs	r3, #64	; 0x40
 800055c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2102      	movs	r1, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f80a 	bl	800257c <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800056e:	f000 f89f 	bl	80006b0 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3770      	adds	r7, #112	; 0x70
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	58024400 	.word	0x58024400
 8000580:	58024800 	.word	0x58024800

08000584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MX_I2C1_Init+0x7c>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c0:	f000 fd68 	bl	8001094 <HAL_I2C_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ca:	f000 f871 	bl	80006b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d2:	f001 faaf 	bl	8001b34 <HAL_I2CEx_ConfigAnalogFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 f868 	bl	80006b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e4:	f001 faf1 	bl	8001bca <HAL_I2CEx_ConfigDigitalFilter>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 f85f 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	24000030 	.word	0x24000030
 80005fc:	40005400 	.word	0x40005400
 8000600:	00707cbb 	.word	0x00707cbb

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_GPIO_Init+0x50>)
 800060c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <MX_GPIO_Init+0x50>)
 8000612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000616:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0x50>)
 800061c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_GPIO_Init+0x50>)
 800062a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <MX_GPIO_Init+0x50>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_GPIO_Init+0x50>)
 800063a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	58024400 	.word	0x58024400

08000658 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800066a:	f000 faeb 	bl	8000c44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800066e:	2301      	movs	r3, #1
 8000670:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000672:	2300      	movs	r3, #0
 8000674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800067a:	231f      	movs	r3, #31
 800067c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800067e:	2387      	movs	r3, #135	; 0x87
 8000680:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000682:	2300      	movs	r3, #0
 8000684:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000686:	2300      	movs	r3, #0
 8000688:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800068a:	2301      	movs	r3, #1
 800068c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800068e:	2301      	movs	r3, #1
 8000690:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800069a:	463b      	mov	r3, r7
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fb09 	bl	8000cb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006a2:	2004      	movs	r0, #4
 80006a4:	f000 fae6 	bl	8000c74 <HAL_MPU_Enable>

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_MspInit+0x30>)
 80006c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x30>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x30>)
 80006d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	58024400 	.word	0x58024400

080006f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0ba      	sub	sp, #232	; 0xe8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fda9 	bl	8004268 <memset>
  if(hi2c->Instance==I2C1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <HAL_I2C_MspInit+0xc4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d145      	bne.n	80007ac <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000720:	f04f 0208 	mov.w	r2, #8
 8000724:	f04f 0300 	mov.w	r3, #0
 8000728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fa50 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000742:	f7ff ffb5 	bl	80006b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000764:	23c0      	movs	r3, #192	; 0xc0
 8000766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076a:	2312      	movs	r3, #18
 800076c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000770:	2301      	movs	r3, #1
 8000772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800077c:	2304      	movs	r3, #4
 800077e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <HAL_I2C_MspInit+0xcc>)
 800078a:	f000 fad3 	bl	8000d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 8000790:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 8000796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0xc8>)
 80007a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	37e8      	adds	r7, #232	; 0xe8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020400 	.word	0x58020400

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f916 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <SystemInit+0xd0>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <SystemInit+0xd0>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <SystemInit+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	2b02      	cmp	r3, #2
 8000832:	d807      	bhi.n	8000844 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <SystemInit+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f023 030f 	bic.w	r3, r3, #15
 800083c:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <SystemInit+0xd4>)
 800083e:	f043 0303 	orr.w	r3, r3, #3
 8000842:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SystemInit+0xd8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <SystemInit+0xd8>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SystemInit+0xd8>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemInit+0xd8>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4924      	ldr	r1, [pc, #144]	; (80008ec <SystemInit+0xd8>)
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemInit+0xdc>)
 800085e:	4013      	ands	r3, r2
 8000860:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <SystemInit+0xd4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 030c 	and.w	r3, r3, #12
 800086a:	2b00      	cmp	r3, #0
 800086c:	d007      	beq.n	800087e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <SystemInit+0xd4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f023 030f 	bic.w	r3, r3, #15
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemInit+0xd4>)
 8000878:	f043 0303 	orr.w	r3, r3, #3
 800087c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <SystemInit+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <SystemInit+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <SystemInit+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <SystemInit+0xd8>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <SystemInit+0xe0>)
 8000894:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <SystemInit+0xd8>)
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <SystemInit+0xe4>)
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <SystemInit+0xd8>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <SystemInit+0xe8>)
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <SystemInit+0xd8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <SystemInit+0xd8>)
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <SystemInit+0xe8>)
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <SystemInit+0xd8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <SystemInit+0xd8>)
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <SystemInit+0xe8>)
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SystemInit+0xd8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <SystemInit+0xd8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <SystemInit+0xd8>)
 80008c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <SystemInit+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <SystemInit+0xec>)
 80008d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	52002000 	.word	0x52002000
 80008ec:	58024400 	.word	0x58024400
 80008f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008f4:	02020200 	.word	0x02020200
 80008f8:	01ff0000 	.word	0x01ff0000
 80008fc:	01010280 	.word	0x01010280
 8000900:	52004000 	.word	0x52004000

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff ff84 	bl	8000814 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000932:	f003 fc75 	bl	8004220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fcdb 	bl	80002f0 <main>
  bx  lr
 800093a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800093c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000940:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000944:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000948:	080042a8 	.word	0x080042a8
  ldr r2, =_sbss
 800094c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000950:	240004bc 	.word	0x240004bc

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f93e 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000964:	f001 ffc0 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8000968:	4602      	mov	r2, r0
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_Init+0x68>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	4913      	ldr	r1, [pc, #76]	; (80009c4 <HAL_Init+0x6c>)
 8000976:	5ccb      	ldrb	r3, [r1, r3]
 8000978:	f003 031f 	and.w	r3, r3, #31
 800097c:	fa22 f303 	lsr.w	r3, r2, r3
 8000980:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_Init+0x68>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_Init+0x6c>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	f003 031f 	and.w	r3, r3, #31
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	fa22 f303 	lsr.w	r3, r2, r3
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <HAL_Init+0x70>)
 800099a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_Init+0x74>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	200f      	movs	r0, #15
 80009a4:	f000 f814 	bl	80009d0 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e002      	b.n	80009b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009b2:	f7ff fe83 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58024400 	.word	0x58024400
 80009c4:	08004290 	.word	0x08004290
 80009c8:	24000008 	.word	0x24000008
 80009cc:	24000004 	.word	0x24000004

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e021      	b.n	8000a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_InitTick+0x64>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_InitTick+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f915 	bl	8000c2a <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f8ed 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_InitTick+0x68>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	24000010 	.word	0x24000010
 8000a34:	24000004 	.word	0x24000004
 8000a38:	2400000c 	.word	0x2400000c

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	24000010 	.word	0x24000010
 8000a60:	240004b8 	.word	0x240004b8

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	240004b8 	.word	0x240004b8

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	05fa0000 	.word	0x05fa0000

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff5e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff90 	bl	8000b34 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffb2 	bl	8000b9c <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c48:	f3bf 8f5f 	dmb	sy
}
 8000c4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_MPU_Disable+0x28>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_MPU_Disable+0x28>)
 8000c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c58:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_MPU_Disable+0x2c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	e000ed90 	.word	0xe000ed90

08000c74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_MPU_Enable+0x38>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_MPU_Enable+0x3c>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_MPU_Enable+0x3c>)
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c92:	f3bf 8f4f 	dsb	sy
}
 8000c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c98:	f3bf 8f6f 	isb	sy
}
 8000c9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed90 	.word	0xe000ed90
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	785a      	ldrb	r2, [r3, #1]
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_MPU_ConfigRegion+0x7c>)
 8000cc2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_MPU_ConfigRegion+0x7c>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_MPU_ConfigRegion+0x7c>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_MPU_ConfigRegion+0x7c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7b1b      	ldrb	r3, [r3, #12]
 8000cdc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7adb      	ldrb	r3, [r3, #11]
 8000ce2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ce4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a9b      	ldrb	r3, [r3, #10]
 8000cea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000cec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7b5b      	ldrb	r3, [r3, #13]
 8000cf2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000cf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7b9b      	ldrb	r3, [r3, #14]
 8000cfa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000cfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7bdb      	ldrb	r3, [r3, #15]
 8000d02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a5b      	ldrb	r3, [r3, #9]
 8000d0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7a1b      	ldrb	r3, [r3, #8]
 8000d12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d20:	6113      	str	r3, [r2, #16]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed90 	.word	0xe000ed90

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_GPIO_Init+0x234>)
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d46:	e194      	b.n	8001072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8186 	beq.w	800106c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x44>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	69b9      	ldr	r1, [r7, #24]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80e0 	beq.w	800106c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000eae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000ebe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x23c>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_GPIO_Init+0x240>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d052      	beq.n	8000f9c <HAL_GPIO_Init+0x268>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_GPIO_Init+0x244>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d031      	beq.n	8000f62 <HAL_GPIO_Init+0x22e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_GPIO_Init+0x248>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d02b      	beq.n	8000f5e <HAL_GPIO_Init+0x22a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_GPIO_Init+0x24c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x250>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x222>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x254>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x21e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x258>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x25c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x260>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_GPIO_Init+0x264>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x20e>
 8000f3e:	2309      	movs	r3, #9
 8000f40:	e02d      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f42:	230a      	movs	r3, #10
 8000f44:	e02b      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f46:	2308      	movs	r3, #8
 8000f48:	e029      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e027      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e025      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e023      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e01f      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e01d      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e01b      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f66:	bf00      	nop
 8000f68:	58000080 	.word	0x58000080
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58000400 	.word	0x58000400
 8000f74:	58020000 	.word	0x58020000
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020c00 	.word	0x58020c00
 8000f84:	58021000 	.word	0x58021000
 8000f88:	58021400 	.word	0x58021400
 8000f8c:	58021800 	.word	0x58021800
 8000f90:	58021c00 	.word	0x58021c00
 8000f94:	58022000 	.word	0x58022000
 8000f98:	58022400 	.word	0x58022400
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fae:	4938      	ldr	r1, [pc, #224]	; (8001090 <HAL_GPIO_Init+0x35c>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	3301      	adds	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f ae63 	bne.w	8000d48 <HAL_GPIO_Init+0x14>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3724      	adds	r7, #36	; 0x24
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	58000400 	.word	0x58000400

08001094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e08b      	b.n	80011be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d106      	bne.n	80010c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fb18 	bl	80006f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2224      	movs	r2, #36	; 0x24
 80010c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	e006      	b.n	800111c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800111a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d108      	bne.n	8001136 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	e007      	b.n	8001146 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6859      	ldr	r1, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_I2C_Init+0x134>)
 8001152:	430b      	orrs	r3, r1
 8001154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69d9      	ldr	r1, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	02008000 	.word	0x02008000

080011cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	460b      	mov	r3, r1
 80011da:	817b      	strh	r3, [r7, #10]
 80011dc:	4613      	mov	r3, r2
 80011de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	f040 80fd 	bne.w	80013e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_I2C_Master_Transmit+0x30>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e0f6      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001204:	f7ff fc2e 	bl	8000a64 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2319      	movs	r3, #25
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 fa0a 	bl	8001630 <I2C_WaitOnFlagUntilTimeout>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0e1      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2221      	movs	r2, #33	; 0x21
 800122a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2210      	movs	r2, #16
 8001232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	893a      	ldrh	r2, [r7, #8]
 8001246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d906      	bls.n	8001266 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800125e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e007      	b.n	8001276 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126a:	b29a      	uxth	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001274:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127a:	2b00      	cmp	r3, #0
 800127c:	d024      	beq.n	80012c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	8979      	ldrh	r1, [r7, #10]
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_I2C_Master_Transmit+0x228>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fc05 	bl	8001ad0 <I2C_TransferConfig>
 80012c6:	e066      	b.n	8001396 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <HAL_I2C_Master_Transmit+0x228>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 fbfa 	bl	8001ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012dc:	e05b      	b.n	8001396 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	6a39      	ldr	r1, [r7, #32]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f9fd 	bl	80016e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e07b      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d034      	beq.n	8001396 <HAL_I2C_Master_Transmit+0x1ca>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d130      	bne.n	8001396 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f976 	bl	8001630 <I2C_WaitOnFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e04d      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d90e      	bls.n	8001376 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001362:	b2da      	uxtb	r2, r3
 8001364:	8979      	ldrh	r1, [r7, #10]
 8001366:	2300      	movs	r3, #0
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fbae 	bl	8001ad0 <I2C_TransferConfig>
 8001374:	e00f      	b.n	8001396 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001384:	b2da      	uxtb	r2, r3
 8001386:	8979      	ldrh	r1, [r7, #10]
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 fb9d 	bl	8001ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139a:	b29b      	uxth	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d19e      	bne.n	80012de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	6a39      	ldr	r1, [r7, #32]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f9e3 	bl	8001770 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e01a      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2220      	movs	r2, #32
 80013ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_I2C_Master_Transmit+0x22c>)
 80013c8:	400b      	ands	r3, r1
 80013ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e000      	b.n	80013ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80013e8:	2302      	movs	r3, #2
  }
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	80002000 	.word	0x80002000
 80013f8:	fe00e800 	.word	0xfe00e800

080013fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	817b      	strh	r3, [r7, #10]
 800140c:	4613      	mov	r3, r2
 800140e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b20      	cmp	r3, #32
 800141a:	f040 80db 	bne.w	80015d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_I2C_Master_Receive+0x30>
 8001428:	2302      	movs	r3, #2
 800142a:	e0d4      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001434:	f7ff fb16 	bl	8000a64 <HAL_GetTick>
 8001438:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2319      	movs	r3, #25
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f8f2 	bl	8001630 <I2C_WaitOnFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0bf      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2222      	movs	r2, #34	; 0x22
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2210      	movs	r2, #16
 8001462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	893a      	ldrh	r2, [r7, #8]
 8001476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29b      	uxth	r3, r3
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d90e      	bls.n	80014a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <HAL_I2C_Master_Receive+0x1e4>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fb16 	bl	8001ad0 <I2C_TransferConfig>
 80014a4:	e06d      	b.n	8001582 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	8979      	ldrh	r1, [r7, #10]
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_I2C_Master_Receive+0x1e4>)
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fb05 	bl	8001ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80014c6:	e05c      	b.n	8001582 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	6a39      	ldr	r1, [r7, #32]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f993 	bl	80017f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e07c      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d034      	beq.n	8001582 <HAL_I2C_Master_Receive+0x186>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	d130      	bne.n	8001582 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f880 	bl	8001630 <I2C_WaitOnFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e04d      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d90e      	bls.n	8001562 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	b2da      	uxtb	r2, r3
 8001550:	8979      	ldrh	r1, [r7, #10]
 8001552:	2300      	movs	r3, #0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fab8 	bl	8001ad0 <I2C_TransferConfig>
 8001560:	e00f      	b.n	8001582 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001570:	b2da      	uxtb	r2, r3
 8001572:	8979      	ldrh	r1, [r7, #10]
 8001574:	2300      	movs	r3, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 faa7 	bl	8001ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d19d      	bne.n	80014c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	6a39      	ldr	r1, [r7, #32]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f8ed 	bl	8001770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e01a      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2220      	movs	r2, #32
 80015a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_I2C_Master_Receive+0x1e8>)
 80015b4:	400b      	ands	r3, r1
 80015b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
  }
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	80002400 	.word	0x80002400
 80015e4:	fe00e800 	.word	0xfe00e800

080015e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d103      	bne.n	8001606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d007      	beq.n	8001624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	619a      	str	r2, [r3, #24]
  }
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001640:	e03b      	b.n	80016ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f962 	bl	8001910 <I2C_IsErrorOccurred>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e041      	b.n	80016da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d02d      	beq.n	80016ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165e:	f7ff fa01 	bl	8000a64 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d302      	bcc.n	8001674 <I2C_WaitOnFlagUntilTimeout+0x44>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d122      	bne.n	80016ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4013      	ands	r3, r2
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	429a      	cmp	r2, r3
 8001690:	d113      	bne.n	80016ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4013      	ands	r3, r2
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d0b4      	beq.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016ee:	e033      	b.n	8001758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f90b 	bl	8001910 <I2C_IsErrorOccurred>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e031      	b.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d025      	beq.n	8001758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170c:	f7ff f9aa 	bl	8000a64 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	d302      	bcc.n	8001722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11a      	bne.n	8001758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b02      	cmp	r3, #2
 800172e:	d013      	beq.n	8001758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f043 0220 	orr.w	r2, r3, #32
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e007      	b.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d1c4      	bne.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800177c:	e02f      	b.n	80017de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f8c4 	bl	8001910 <I2C_IsErrorOccurred>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e02d      	b.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001792:	f7ff f967 	bl	8000a64 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d302      	bcc.n	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11a      	bne.n	80017de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d013      	beq.n	80017de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f043 0220 	orr.w	r2, r3, #32
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e007      	b.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d1c8      	bne.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001808:	e071      	b.n	80018ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f87e 	bl	8001910 <I2C_IsErrorOccurred>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b20      	cmp	r3, #32
 800182a:	d13b      	bne.n	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d138      	bne.n	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b04      	cmp	r3, #4
 800183e:	d105      	bne.n	800184c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b10      	cmp	r3, #16
 8001858:	d121      	bne.n	800189e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2204      	movs	r2, #4
 8001866:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800187c:	400b      	ands	r3, r1
 800187e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	75fb      	strb	r3, [r7, #23]
 800189c:	e002      	b.n	80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80018a4:	f7ff f8de 	bl	8000a64 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d302      	bcc.n	80018ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d119      	bne.n	80018ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d116      	bne.n	80018ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d00f      	beq.n	80018ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f043 0220 	orr.w	r2, r3, #32
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d002      	beq.n	8001902 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d083      	beq.n	800180a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	fe00e800 	.word	0xfe00e800

08001910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d068      	beq.n	8001a0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001944:	e049      	b.n	80019da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d045      	beq.n	80019da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800194e:	f7ff f889 	bl	8000a64 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d302      	bcc.n	8001964 <I2C_IsErrorOccurred+0x54>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d13a      	bne.n	80019da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001986:	d121      	bne.n	80019cc <I2C_IsErrorOccurred+0xbc>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198e:	d01d      	beq.n	80019cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b20      	cmp	r3, #32
 8001994:	d01a      	beq.n	80019cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019a6:	f7ff f85d 	bl	8000a64 <HAL_GetTick>
 80019aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ac:	e00e      	b.n	80019cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019ae:	f7ff f859 	bl	8000a64 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b19      	cmp	r3, #25
 80019ba:	d907      	bls.n	80019cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80019ca:	e006      	b.n	80019da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d1e9      	bne.n	80019ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d003      	beq.n	80019f0 <I2C_IsErrorOccurred+0xe0>
 80019e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0aa      	beq.n	8001946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00b      	beq.n	8001a7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01c      	beq.n	8001abe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fdaf 	bl	80015e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <I2C_IsErrorOccurred+0x1bc>)
 8001a96:	400b      	ands	r3, r1
 8001a98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	fe00e800 	.word	0xfe00e800

08001ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	817b      	strh	r3, [r7, #10]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ae8:	7a7b      	ldrb	r3, [r7, #9]
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001af0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001afe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	0d5b      	lsrs	r3, r3, #21
 8001b0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <I2C_TransferConfig+0x60>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	43db      	mvns	r3, r3
 8001b14:	ea02 0103 	and.w	r1, r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	03ff63ff 	.word	0x03ff63ff

08001b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d138      	bne.n	8001bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e032      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d139      	bne.n	8001c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e033      	b.n	8001c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	2b06      	cmp	r3, #6
 8001c76:	d00a      	beq.n	8001c8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e040      	b.n	8001d0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e03e      	b.n	8001d0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001c96:	491f      	ldr	r1, [pc, #124]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c9e:	f7fe fee1 	bl	8000a64 <HAL_GetTick>
 8001ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca4:	e009      	b.n	8001cba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ca6:	f7fe fedd 	bl	8000a64 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb4:	d901      	bls.n	8001cba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e028      	b.n	8001d0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b1e      	cmp	r3, #30
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PWREx_ConfigSupply+0x7c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8001cd2:	d005      	beq.n	8001ce0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b1d      	cmp	r3, #29
 8001cd8:	d002      	beq.n	8001ce0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8001cde:	d114      	bne.n	8001d0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ce0:	f7fe fec0 	bl	8000a64 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ce6:	e009      	b.n	8001cfc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ce8:	f7fe febc 	bl	8000a64 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	d901      	bls.n	8001cfc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	58024800 	.word	0x58024800

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f000 bc1f 	b.w	800256a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80b3 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d44:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_OscConfig+0x48>
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	2b18      	cmp	r3, #24
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x64>
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d10d      	bne.n	8001d7c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8098 	beq.w	8001e9e <HAL_RCC_OscConfig+0x186>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8093 	bne.w	8001e9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e3f6      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x7c>
 8001d86:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a81      	ldr	r2, [pc, #516]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e058      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xaa>
 8001d9c:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e041      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dca:	d112      	bne.n	8001df2 <HAL_RCC_OscConfig+0xda>
 8001dcc:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6c      	ldr	r2, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e029      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001dfa:	d112      	bne.n	8001e22 <HAL_RCC_OscConfig+0x10a>
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e011      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
 8001e22:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d013      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fe09 	bl	8000a64 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e56:	f7fe fe05 	bl	8000a64 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e380      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x13e>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fdf5 	bl	8000a64 <HAL_GetTick>
 8001e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7e:	f7fe fdf1 	bl	8000a64 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e36c      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x166>
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 808c 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eb6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1bc>
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2b18      	cmp	r3, #24
 8001ec8:	d137      	bne.n	8001f3a <HAL_RCC_OscConfig+0x222>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d132      	bne.n	8001f3a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x1d4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e33e      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 0219 	bic.w	r2, r3, #25
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4925      	ldr	r1, [pc, #148]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe fdb1 	bl	8000a64 <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7fe fdad 	bl	8000a64 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e328      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	4917      	ldr	r1, [pc, #92]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	e045      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0219 	bic.w	r2, r3, #25
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4910      	ldr	r1, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fd86 	bl	8000a64 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fd82 	bl	8000a64 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e2fd      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	4901      	ldr	r1, [pc, #4]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2ae>
 8001f90:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f94:	4b97      	ldr	r3, [pc, #604]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fd60 	bl	8000a64 <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fd5c 	bl	8000a64 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2d7      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fba:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06a      	beq.n	80020a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fdc:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d007      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2e0>
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b18      	cmp	r3, #24
 8001fec:	d11b      	bne.n	8002026 <HAL_RCC_OscConfig+0x30e>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ff8:	4b7e      	ldr	r3, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x2f8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e2ac      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002010:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	4975      	ldr	r1, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002024:	e040      	b.n	80020a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800202e:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a70      	ldr	r2, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fd13 	bl	8000a64 <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002042:	f7fe fd0f 	bl	8000a64 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e28a      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002054:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	4961      	ldr	r1, [pc, #388]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002076:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 800207c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fcef 	bl	8000a64 <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800208a:	f7fe fceb 	bl	8000a64 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e266      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d036      	beq.n	8002122 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d019      	beq.n	80020f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fccc 	bl	8000a64 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fcc8 	bl	8000a64 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e243      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3b8>
 80020ee:	e018      	b.n	8002122 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	4a3f      	ldr	r2, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fcb2 	bl	8000a64 <HAL_GetTick>
 8002100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7fe fcae 	bl	8000a64 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e229      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d036      	beq.n	800219c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 800213c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002140:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002142:	f7fe fc8f 	bl	8000a64 <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214a:	f7fe fc8b 	bl	8000a64 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e206      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x432>
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002174:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002176:	f7fe fc75 	bl	8000a64 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217e:	f7fe fc71 	bl	8000a64 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1ec      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80af 	beq.w	8002308 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_OscConfig+0x4e0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_RCC_OscConfig+0x4e0>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b6:	f7fe fc55 	bl	8000a64 <HAL_GetTick>
 80021ba:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fc51 	bl	8000a64 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1cc      	b.n	800256a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x4e0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x4e4>
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a02      	ldr	r2, [pc, #8]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e05b      	b.n	80022aa <HAL_RCC_OscConfig+0x592>
 80021f2:	bf00      	nop
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58024800 	.word	0x58024800
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x512>
 8002204:	4b9d      	ldr	r3, [pc, #628]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a9c      	ldr	r2, [pc, #624]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	4b9a      	ldr	r3, [pc, #616]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a99      	ldr	r2, [pc, #612]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	4b97      	ldr	r3, [pc, #604]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a96      	ldr	r2, [pc, #600]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	e03f      	b.n	80022aa <HAL_RCC_OscConfig+0x592>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d112      	bne.n	8002258 <HAL_RCC_OscConfig+0x540>
 8002232:	4b92      	ldr	r3, [pc, #584]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a91      	ldr	r2, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
 800223e:	4b8f      	ldr	r3, [pc, #572]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a8e      	ldr	r2, [pc, #568]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a8b      	ldr	r2, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	e028      	b.n	80022aa <HAL_RCC_OscConfig+0x592>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b85      	cmp	r3, #133	; 0x85
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x56e>
 8002260:	4b86      	ldr	r3, [pc, #536]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a85      	ldr	r2, [pc, #532]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b83      	ldr	r3, [pc, #524]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a82      	ldr	r2, [pc, #520]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	4b80      	ldr	r3, [pc, #512]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e011      	b.n	80022aa <HAL_RCC_OscConfig+0x592>
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a79      	ldr	r2, [pc, #484]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a76      	ldr	r2, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80022a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe fbd7 	bl	8000a64 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fbd3 	bl	8000a64 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e14c      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x5a2>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe fbc1 	bl	8000a64 <HAL_GetTick>
 80022e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fbbd 	bl	8000a64 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e136      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022fc:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 812b 	beq.w	8002568 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800231a:	2b18      	cmp	r3, #24
 800231c:	f000 80bb 	beq.w	8002496 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 8095 	bne.w	8002454 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a53      	ldr	r2, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fb95 	bl	8000a64 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fb91 	bl	8000a64 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e10c      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800235e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002360:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_OscConfig+0x768>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	430a      	orrs	r2, r1
 8002370:	4942      	ldr	r1, [pc, #264]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002372:	4313      	orrs	r3, r2
 8002374:	628b      	str	r3, [r1, #40]	; 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	3b01      	subs	r3, #1
 800237c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	3b01      	subs	r3, #1
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	b29b      	uxth	r3, r3
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	3b01      	subs	r3, #1
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023a6:	4935      	ldr	r1, [pc, #212]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	4a32      	ldr	r2, [pc, #200]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x76c>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023c4:	00d2      	lsls	r2, r2, #3
 80023c6:	492d      	ldr	r1, [pc, #180]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f023 020c 	bic.w	r2, r3, #12
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4928      	ldr	r1, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f023 0202 	bic.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4924      	ldr	r1, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_RCC_OscConfig+0x764>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800240e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fb1a 	bl	8000a64 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fb16 	bl	8000a64 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e091      	b.n	800256a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x71c>
 8002452:	e089      	b.n	8002568 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_OscConfig+0x764>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a08      	ldr	r2, [pc, #32]	; (800247c <HAL_RCC_OscConfig+0x764>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fb00 	bl	8000a64 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fafc 	bl	8000a64 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d908      	bls.n	8002488 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e077      	b.n	800256a <HAL_RCC_OscConfig+0x852>
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	fffffc0c 	.word	0xfffffc0c
 8002484:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002488:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e9      	bne.n	8002468 <HAL_RCC_OscConfig+0x750>
 8002494:	e068      	b.n	8002568 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002496:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800249c:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d031      	beq.n	800250e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d12a      	bne.n	800250e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d122      	bne.n	800250e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d11a      	bne.n	800250e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d111      	bne.n	800250e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d108      	bne.n	800250e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	0e1b      	lsrs	r3, r3, #24
 8002500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e02b      	b.n	800256a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800251c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d01f      	beq.n	8002568 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002534:	f7fe fa96 	bl	8000a64 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800253a:	bf00      	nop
 800253c:	f7fe fa92 	bl	8000a64 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	4293      	cmp	r3, r2
 8002546:	d0f9      	beq.n	800253c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800254a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x860>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	4907      	ldr	r1, [pc, #28]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCC_OscConfig+0x85c>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	58024400 	.word	0x58024400
 8002578:	ffff0007 	.word	0xffff0007

0800257c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e19c      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 020f 	bic.w	r2, r3, #15
 80025a6:	4985      	ldr	r1, [pc, #532]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e184      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d010      	beq.n	80025ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025d8:	429a      	cmp	r2, r3
 80025da:	d908      	bls.n	80025ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025dc:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	4975      	ldr	r1, [pc, #468]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002606:	429a      	cmp	r2, r3
 8002608:	d908      	bls.n	800261c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	496a      	ldr	r1, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002618:	4313      	orrs	r3, r2
 800261a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	495e      	ldr	r1, [pc, #376]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002646:	4313      	orrs	r3, r2
 8002648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002662:	429a      	cmp	r2, r3
 8002664:	d908      	bls.n	8002678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4953      	ldr	r1, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002674:	4313      	orrs	r3, r2
 8002676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	429a      	cmp	r2, r3
 8002692:	d908      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f023 020f 	bic.w	r2, r3, #15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4947      	ldr	r1, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d055      	beq.n	800275e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4940      	ldr	r1, [pc, #256]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d121      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0f6      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d115      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ea      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fc:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0de      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d6      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f023 0207 	bic.w	r2, r3, #7
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272e:	f7fe f999 	bl	8000a64 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002734:	e00a      	b.n	800274c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7fe f995 	bl	8000a64 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0be      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	429a      	cmp	r2, r3
 800275c:	d1eb      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	429a      	cmp	r2, r3
 8002778:	d208      	bcs.n	800278c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f023 020f 	bic.w	r2, r3, #15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002788:	4313      	orrs	r3, r2
 800278a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d214      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	4906      	ldr	r1, [pc, #24]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e086      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
 80027bc:	52002000 	.word	0x52002000
 80027c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027dc:	429a      	cmp	r2, r3
 80027de:	d208      	bcs.n	80027f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	4939      	ldr	r1, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800280a:	429a      	cmp	r2, r3
 800280c:	d208      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	492e      	ldr	r1, [pc, #184]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800281c:	4313      	orrs	r3, r2
 800281e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002838:	429a      	cmp	r2, r3
 800283a:	d208      	bcs.n	800284e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4922      	ldr	r1, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800284a:	4313      	orrs	r3, r2
 800284c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002866:	429a      	cmp	r2, r3
 8002868:	d208      	bcs.n	800287c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4917      	ldr	r1, [pc, #92]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002878:	4313      	orrs	r3, r2
 800287a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800287c:	f000 f834 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4912      	ldr	r1, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x35c>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_RCC_ClockConfig+0x35c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x360>)
 80028b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x364>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x368>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f886 	bl	80009d0 <HAL_InitTick>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	08004290 	.word	0x08004290
 80028dc:	24000008 	.word	0x24000008
 80028e0:	24000004 	.word	0x24000004
 80028e4:	2400000c 	.word	0x2400000c

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ee:	4bb3      	ldr	r3, [pc, #716]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	f200 8155 	bhi.w	8002ba6 <HAL_RCC_GetSysClockFreq+0x2be>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002969 	.word	0x08002969
 8002908:	08002ba7 	.word	0x08002ba7
 800290c:	08002ba7 	.word	0x08002ba7
 8002910:	08002ba7 	.word	0x08002ba7
 8002914:	08002ba7 	.word	0x08002ba7
 8002918:	08002ba7 	.word	0x08002ba7
 800291c:	08002ba7 	.word	0x08002ba7
 8002920:	08002ba7 	.word	0x08002ba7
 8002924:	0800298f 	.word	0x0800298f
 8002928:	08002ba7 	.word	0x08002ba7
 800292c:	08002ba7 	.word	0x08002ba7
 8002930:	08002ba7 	.word	0x08002ba7
 8002934:	08002ba7 	.word	0x08002ba7
 8002938:	08002ba7 	.word	0x08002ba7
 800293c:	08002ba7 	.word	0x08002ba7
 8002940:	08002ba7 	.word	0x08002ba7
 8002944:	08002995 	.word	0x08002995
 8002948:	08002ba7 	.word	0x08002ba7
 800294c:	08002ba7 	.word	0x08002ba7
 8002950:	08002ba7 	.word	0x08002ba7
 8002954:	08002ba7 	.word	0x08002ba7
 8002958:	08002ba7 	.word	0x08002ba7
 800295c:	08002ba7 	.word	0x08002ba7
 8002960:	08002ba7 	.word	0x08002ba7
 8002964:	0800299b 	.word	0x0800299b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002968:	4b94      	ldr	r3, [pc, #592]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002974:	4b91      	ldr	r3, [pc, #580]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002986:	e111      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002988:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800298a:	61bb      	str	r3, [r7, #24]
      break;
 800298c:	e10e      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800298e:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002990:	61bb      	str	r3, [r7, #24]
      break;
 8002992:	e10b      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002994:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002996:	61bb      	str	r3, [r7, #24]
      break;
 8002998:	e108      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029a4:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029b0:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029ba:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80e1 	beq.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f000 8083 	beq.w	8002aec <HAL_RCC_GetSysClockFreq+0x204>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f200 80a1 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x248>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x114>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d056      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029fa:	e099      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	4a6b      	ldr	r2, [pc, #428]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	ee07 3a90 	vmov	s15, r3
 8002a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a62:	e087      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aa6:	e065      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ace:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aea:	e043      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b2e:	e021      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	0a5b      	lsrs	r3, r3, #9
 8002b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b7e:	3301      	adds	r3, #1
 8002b80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b98:	ee17 3a90 	vmov	r3, s15
 8002b9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
      break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ba8:	61bb      	str	r3, [r7, #24]
      break;
 8002baa:	bf00      	nop
  }

  return sysclockfreq;
 8002bac:	69bb      	ldr	r3, [r7, #24]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	03d09000 	.word	0x03d09000
 8002bc4:	003d0900 	.word	0x003d0900
 8002bc8:	016e3600 	.word	0x016e3600
 8002bcc:	46000000 	.word	0x46000000
 8002bd0:	4c742400 	.word	0x4c742400
 8002bd4:	4a742400 	.word	0x4a742400
 8002bd8:	4bb71b00 	.word	0x4bb71b00

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b0c8      	sub	sp, #288	; 0x120
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c00:	2500      	movs	r5, #0
 8002c02:	ea54 0305 	orrs.w	r3, r4, r5
 8002c06:	d049      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c12:	d02f      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c18:	d828      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1e:	d01a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c24:	d822      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d007      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c30:	e01c      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c32:	4ba7      	ldr	r3, [pc, #668]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4aa6      	ldr	r2, [pc, #664]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c3e:	e01a      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c44:	3308      	adds	r3, #8
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f985 	bl	8003f58 <RCCEx_PLL2_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c54:	e00f      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5a:	3328      	adds	r3, #40	; 0x28
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fa2c 	bl	80040bc <RCCEx_PLL3_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c7e:	4b94      	ldr	r3, [pc, #592]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8c:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	6513      	str	r3, [r2, #80]	; 0x50
 8002c92:	e003      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002ca8:	f04f 0900 	mov.w	r9, #0
 8002cac:	ea58 0309 	orrs.w	r3, r8, r9
 8002cb0:	d047      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d82a      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd9 	.word	0x08002cd9
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cfd 	.word	0x08002cfd
 8002cd0:	08002d1b 	.word	0x08002d1b
 8002cd4:	08002d1b 	.word	0x08002d1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd8:	4b7d      	ldr	r3, [pc, #500]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4a7c      	ldr	r2, [pc, #496]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ce4:	e01a      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cea:	3308      	adds	r3, #8
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 f932 	bl	8003f58 <RCCEx_PLL2_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d00:	3328      	adds	r3, #40	; 0x28
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 f9d9 	bl	80040bc <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d10:	e004      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d18:	e000      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	f023 0107 	bic.w	r1, r3, #7
 8002d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a67      	ldr	r2, [pc, #412]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6513      	str	r3, [r2, #80]	; 0x50
 8002d38:	e003      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002d4e:	f04f 0b00 	mov.w	fp, #0
 8002d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d56:	d054      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d62:	d036      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002d64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d68:	d82f      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6e:	d032      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d829      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d76:	2bc0      	cmp	r3, #192	; 0xc0
 8002d78:	d02f      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d7c:	d825      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d018      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d821      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d007      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002d8e:	e01c      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a4e      	ldr	r2, [pc, #312]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002d9c:	e01e      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da2:	3308      	adds	r3, #8
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 f8d6 	bl	8003f58 <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002db2:	e013      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db8:	3328      	adds	r3, #40	; 0x28
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f97d 	bl	80040bc <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6513      	str	r3, [r2, #80]	; 0x50
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d05c      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e2c:	d03b      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e2e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e32:	d834      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e38:	d037      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3e:	d82e      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e44:	d033      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e4a:	d828      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d01a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d822      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d007      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002e62:	e01c      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e70:	e01e      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e76:	3308      	adds	r3, #8
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f86c 	bl	8003f58 <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e86:	e013      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e8c:	3328      	adds	r3, #40	; 0x28
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f913 	bl	80040bc <RCCEx_PLL3_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	4a02      	ldr	r2, [pc, #8]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6513      	str	r3, [r2, #80]	; 0x50
 8002ecc:	e006      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002ece:	bf00      	nop
 8002ed0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ed8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ef2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	d03a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	2b30      	cmp	r3, #48	; 0x30
 8002f04:	d01f      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002f06:	2b30      	cmp	r3, #48	; 0x30
 8002f08:	d819      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d00c      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d815      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d111      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1a:	4bae      	ldr	r3, [pc, #696]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4aad      	ldr	r2, [pc, #692]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f26:	e011      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f811 	bl	8003f58 <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f54:	4b9f      	ldr	r3, [pc, #636]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	4a9c      	ldr	r2, [pc, #624]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	d051      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9c:	d035      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa2:	d82e      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa8:	d031      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fae:	d828      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb4:	d01a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fba:	d822      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d007      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002fc6:	e01c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4a81      	ldr	r2, [pc, #516]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fd4:	e01c      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fda:	3308      	adds	r3, #8
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 ffba 	bl	8003f58 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fea:	e011      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff0:	3328      	adds	r3, #40	; 0x28
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f861 	bl	80040bc <RCCEx_PLL3_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003008:	e002      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800300e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003010:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003018:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003026:	4a6b      	ldr	r2, [pc, #428]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6513      	str	r3, [r2, #80]	; 0x50
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003032:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800304c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d053      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d033      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003066:	d82c      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800306c:	d02f      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800306e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003072:	d826      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003078:	d02b      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800307a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800307e:	d820      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003084:	d012      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308a:	d81a      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d022      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d115      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309a:	3308      	adds	r3, #8
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ff5a 	bl	8003f58 <RCCEx_PLL2_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030aa:	e015      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b0:	3328      	adds	r3, #40	; 0x28
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 f801 	bl	80040bc <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030c0:	e00a      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030e0:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ee:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6513      	str	r3, [r2, #80]	; 0x50
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800310a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003114:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d060      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800311e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003126:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800312a:	d039      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800312c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003130:	d832      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003136:	d035      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313c:	d82c      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d031      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d826      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800314a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800314e:	d02d      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003154:	d820      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003160:	d81a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d024      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316a:	d115      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	3308      	adds	r3, #8
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 feef 	bl	8003f58 <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003180:	e017      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003186:	3328      	adds	r3, #40	; 0x28
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ff96 	bl	80040bc <RCCEx_PLL3_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003196:	e00c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800319e:	e008      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a0:	bf00      	nop
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ca:	4a02      	ldr	r2, [pc, #8]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80031d2:	bf00      	nop
 80031d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80031ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80031f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031fa:	460b      	mov	r3, r1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	d037      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320a:	d00e      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d816      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321a:	d111      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321c:	4bc4      	ldr	r3, [pc, #784]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4ac3      	ldr	r2, [pc, #780]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003228:	e00f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322e:	3308      	adds	r3, #8
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe90 	bl	8003f58 <RCCEx_PLL2_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003252:	4bb7      	ldr	r3, [pc, #732]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800325a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003260:	4ab3      	ldr	r2, [pc, #716]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003262:	430b      	orrs	r3, r1
 8003264:	6513      	str	r3, [r2, #80]	; 0x50
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800326c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003286:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800328a:	460b      	mov	r3, r1
 800328c:	4313      	orrs	r3, r2
 800328e:	d039      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003296:	2b03      	cmp	r3, #3
 8003298:	d81c      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032dd 	.word	0x080032dd
 80032a4:	080032b1 	.word	0x080032b1
 80032a8:	080032bf 	.word	0x080032bf
 80032ac:	080032dd 	.word	0x080032dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b0:	4b9f      	ldr	r3, [pc, #636]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a9e      	ldr	r2, [pc, #632]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032bc:	e00f      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c2:	3308      	adds	r3, #8
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fe46 	bl	8003f58 <RCCEx_PLL2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032d2:	e004      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032e6:	4b92      	ldr	r3, [pc, #584]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f023 0103 	bic.w	r1, r3, #3
 80032ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	4a8e      	ldr	r2, [pc, #568]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032f6:	430b      	orrs	r3, r1
 80032f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fa:	e003      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003300:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800331a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	f000 8099 	beq.w	8003458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003326:	4b83      	ldr	r3, [pc, #524]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a82      	ldr	r2, [pc, #520]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003332:	f7fd fb97 	bl	8000a64 <HAL_GetTick>
 8003336:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	e00b      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7fd fb92 	bl	8000a64 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d903      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003352:	e005      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003354:	4b77      	ldr	r3, [pc, #476]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ed      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003364:	2b00      	cmp	r3, #0
 8003366:	d173      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003368:	4b71      	ldr	r3, [pc, #452]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800336a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800336c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003374:	4053      	eors	r3, r2
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800338a:	4b69      	ldr	r3, [pc, #420]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a68      	ldr	r2, [pc, #416]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033a2:	4a63      	ldr	r2, [pc, #396]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b6:	d118      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fb54 	bl	8000a64 <HAL_GetTick>
 80033bc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c0:	e00d      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fd fb4f 	bl	8000a64 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d903      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80033dc:	e005      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033de:	4b54      	ldr	r3, [pc, #336]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0eb      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80033ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d129      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003402:	d10e      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003404:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003414:	091a      	lsrs	r2, r3, #4
 8003416:	4b48      	ldr	r3, [pc, #288]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003418:	4013      	ands	r3, r2
 800341a:	4a45      	ldr	r2, [pc, #276]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6113      	str	r3, [r2, #16]
 8003420:	e005      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4a42      	ldr	r2, [pc, #264]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800342c:	6113      	str	r3, [r2, #16]
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003430:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	e008      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800344a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003454:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f002 0301 	and.w	r3, r2, #1
 8003464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800346e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003472:	460b      	mov	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	f000 8090 	beq.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	2b28      	cmp	r3, #40	; 0x28
 8003484:	d870      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	08003571 	.word	0x08003571
 8003490:	08003569 	.word	0x08003569
 8003494:	08003569 	.word	0x08003569
 8003498:	08003569 	.word	0x08003569
 800349c:	08003569 	.word	0x08003569
 80034a0:	08003569 	.word	0x08003569
 80034a4:	08003569 	.word	0x08003569
 80034a8:	08003569 	.word	0x08003569
 80034ac:	0800353d 	.word	0x0800353d
 80034b0:	08003569 	.word	0x08003569
 80034b4:	08003569 	.word	0x08003569
 80034b8:	08003569 	.word	0x08003569
 80034bc:	08003569 	.word	0x08003569
 80034c0:	08003569 	.word	0x08003569
 80034c4:	08003569 	.word	0x08003569
 80034c8:	08003569 	.word	0x08003569
 80034cc:	08003553 	.word	0x08003553
 80034d0:	08003569 	.word	0x08003569
 80034d4:	08003569 	.word	0x08003569
 80034d8:	08003569 	.word	0x08003569
 80034dc:	08003569 	.word	0x08003569
 80034e0:	08003569 	.word	0x08003569
 80034e4:	08003569 	.word	0x08003569
 80034e8:	08003569 	.word	0x08003569
 80034ec:	08003571 	.word	0x08003571
 80034f0:	08003569 	.word	0x08003569
 80034f4:	08003569 	.word	0x08003569
 80034f8:	08003569 	.word	0x08003569
 80034fc:	08003569 	.word	0x08003569
 8003500:	08003569 	.word	0x08003569
 8003504:	08003569 	.word	0x08003569
 8003508:	08003569 	.word	0x08003569
 800350c:	08003571 	.word	0x08003571
 8003510:	08003569 	.word	0x08003569
 8003514:	08003569 	.word	0x08003569
 8003518:	08003569 	.word	0x08003569
 800351c:	08003569 	.word	0x08003569
 8003520:	08003569 	.word	0x08003569
 8003524:	08003569 	.word	0x08003569
 8003528:	08003569 	.word	0x08003569
 800352c:	08003571 	.word	0x08003571
 8003530:	58024400 	.word	0x58024400
 8003534:	58024800 	.word	0x58024800
 8003538:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800353c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003540:	3308      	adds	r3, #8
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fd07 	bl	8003f58 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003550:	e00f      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003556:	3328      	adds	r3, #40	; 0x28
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fdae 	bl	80040bc <RCCEx_PLL3_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003566:	e004      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800357a:	4bc0      	ldr	r3, [pc, #768]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	4abc      	ldr	r2, [pc, #752]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6553      	str	r3, [r2, #84]	; 0x54
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003596:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f002 0302 	and.w	r3, r2, #2
 80035a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d043      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d824      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	08003619 	.word	0x08003619
 80035d0:	080035e5 	.word	0x080035e5
 80035d4:	080035fb 	.word	0x080035fb
 80035d8:	08003619 	.word	0x08003619
 80035dc:	08003619 	.word	0x08003619
 80035e0:	08003619 	.word	0x08003619
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e8:	3308      	adds	r3, #8
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fcb3 	bl	8003f58 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035f8:	e00f      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fe:	3328      	adds	r3, #40	; 0x28
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fd5a 	bl	80040bc <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800360e:	e004      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003622:	4b96      	ldr	r3, [pc, #600]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f023 0107 	bic.w	r1, r3, #7
 800362a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4a92      	ldr	r2, [pc, #584]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003634:	430b      	orrs	r3, r1
 8003636:	6553      	str	r3, [r2, #84]	; 0x54
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800363e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f002 0304 	and.w	r3, r2, #4
 800364e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003658:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d043      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366a:	2b05      	cmp	r3, #5
 800366c:	d824      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036c1 	.word	0x080036c1
 8003678:	0800368d 	.word	0x0800368d
 800367c:	080036a3 	.word	0x080036a3
 8003680:	080036c1 	.word	0x080036c1
 8003684:	080036c1 	.word	0x080036c1
 8003688:	080036c1 	.word	0x080036c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003690:	3308      	adds	r3, #8
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fc5f 	bl	8003f58 <RCCEx_PLL2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036a0:	e00f      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a6:	3328      	adds	r3, #40	; 0x28
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fd06 	bl	80040bc <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036b6:	e004      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ca:	4b6c      	ldr	r3, [pc, #432]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f023 0107 	bic.w	r1, r3, #7
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036da:	4a68      	ldr	r2, [pc, #416]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f002 0320 	and.w	r3, r2, #32
 80036f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003704:	460b      	mov	r3, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	d055      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003716:	d033      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371c:	d82c      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d02f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d826      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800372a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800372e:	d02b      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003730:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003734:	d820      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800373a:	d012      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003740:	d81a      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d022      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374a:	d115      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003750:	3308      	adds	r3, #8
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fbff 	bl	8003f58 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003760:	e015      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003766:	3328      	adds	r3, #40	; 0x28
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fca6 	bl	80040bc <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003776:	e00a      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800377e:	e006      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003780:	bf00      	nop
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003784:	bf00      	nop
 8003786:	e002      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003796:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800379e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6553      	str	r3, [r2, #84]	; 0x54
 80037ac:	e003      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d058      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037e2:	d033      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80037e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037e8:	d82c      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d826      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037fa:	d02b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80037fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003800:	d820      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d012      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d81a      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d022      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d115      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381c:	3308      	adds	r3, #8
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fb99 	bl	8003f58 <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003832:	3328      	adds	r3, #40	; 0x28
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc40 	bl	80040bc <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003842:	e00a      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800384a:	e006      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800384c:	bf00      	nop
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800386a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003872:	4a02      	ldr	r2, [pc, #8]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6593      	str	r3, [r2, #88]	; 0x58
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800389e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d055      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038b4:	d033      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80038b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038ba:	d82c      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c0:	d02f      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80038c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c6:	d826      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038cc:	d02b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80038ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038d2:	d820      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d8:	d012      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038de:	d81a      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d022      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d115      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ee:	3308      	adds	r3, #8
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb30 	bl	8003f58 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038fe:	e015      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003904:	3328      	adds	r3, #40	; 0x28
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fbd7 	bl	80040bc <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003914:	e00a      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003934:	4ba1      	ldr	r3, [pc, #644]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003944:	4a9d      	ldr	r2, [pc, #628]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003946:	430b      	orrs	r3, r1
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
 800394a:	e003      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f002 0308 	and.w	r3, r2, #8
 8003960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800396a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800396e:	460b      	mov	r3, r1
 8003970:	4313      	orrs	r3, r2
 8003972:	d01e      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d10c      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003986:	3328      	adds	r3, #40	; 0x28
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fb96 	bl	80040bc <RCCEx_PLL3_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800399c:	4b87      	ldr	r3, [pc, #540]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ac:	4a83      	ldr	r2, [pc, #524]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f002 0310 	and.w	r3, r2, #16
 80039be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80039c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d01e      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d10c      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fb67 	bl	80040bc <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a0a:	4a6c      	ldr	r2, [pc, #432]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d03e      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a3c:	d022      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a42:	d81b      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003a4e:	e015      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a54:	3308      	adds	r3, #8
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa7d 	bl	8003f58 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fb24 	bl	80040bc <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a9e:	4a47      	ldr	r2, [pc, #284]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aaa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abc:	2300      	movs	r3, #0
 8003abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	d03b      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ad6:	d01f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003adc:	d818      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae2:	d003      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae8:	d007      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003aea:	e011      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aec:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	4a32      	ldr	r2, [pc, #200]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003af8:	e00f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afe:	3328      	adds	r3, #40	; 0x28
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fada 	bl	80040bc <RCCEx_PLL3_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6553      	str	r3, [r2, #84]	; 0x54
 8003b38:	e003      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b50:	2300      	movs	r3, #0
 8003b52:	677b      	str	r3, [r7, #116]	; 0x74
 8003b54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d034      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b82:	3308      	adds	r3, #8
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9e6 	bl	8003f58 <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b92:	e003      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	4a02      	ldr	r2, [pc, #8]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003bba:	bf00      	nop
 8003bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d00c      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	3328      	adds	r3, #40	; 0x28
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fa65 	bl	80040bc <RCCEx_PLL3_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d038      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d018      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2c:	d811      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	d014      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c38:	d80b      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c42:	d106      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c44:	4bc3      	ldr	r3, [pc, #780]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4ac2      	ldr	r2, [pc, #776]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c6c:	4bb9      	ldr	r3, [pc, #740]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	4ab5      	ldr	r2, [pc, #724]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6553      	str	r3, [r2, #84]	; 0x54
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ca8:	4baa      	ldr	r3, [pc, #680]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb6:	4aa7      	ldr	r2, [pc, #668]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cca:	2300      	movs	r3, #0
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cd8:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a9b      	ldr	r2, [pc, #620]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	4a8f      	ldr	r2, [pc, #572]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003d28:	643b      	str	r3, [r7, #64]	; 0x40
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	4a85      	ldr	r2, [pc, #532]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d42:	6113      	str	r3, [r2, #16]
 8003d44:	4b83      	ldr	r3, [pc, #524]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d46:	6919      	ldr	r1, [r3, #16]
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d50:	4a80      	ldr	r2, [pc, #512]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d64:	2300      	movs	r3, #0
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d72:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	4a74      	ldr	r2, [pc, #464]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
 8003d94:	2300      	movs	r3, #0
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
 8003d98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	4a68      	ldr	r2, [pc, #416]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d011      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd8:	3308      	adds	r3, #8
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f8bb 	bl	8003f58 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	2100      	movs	r1, #0
 8003e02:	6239      	str	r1, [r7, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d011      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e18:	3308      	adds	r3, #8
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f89b 	bl	8003f58 <RCCEx_PLL2_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	2100      	movs	r1, #0
 8003e42:	61b9      	str	r1, [r7, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d011      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f87b 	bl	8003f58 <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	2100      	movs	r1, #0
 8003e82:	6139      	str	r1, [r7, #16]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d011      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e98:	3328      	adds	r3, #40	; 0x28
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f90d 	bl	80040bc <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d011      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	3328      	adds	r3, #40	; 0x28
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f8ed 	bl	80040bc <RCCEx_PLL3_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	2100      	movs	r1, #0
 8003f02:	6039      	str	r1, [r7, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d011      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f18:	3328      	adds	r3, #40	; 0x28
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f8cd 	bl	80040bc <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003f38:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400

08003f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f66:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d101      	bne.n	8003f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e099      	b.n	80040aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f76:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fc fd6f 	bl	8000a64 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f8a:	f7fc fd6b 	bl	8000a64 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e086      	b.n	80040aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	493f      	ldr	r1, [pc, #252]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	628b      	str	r3, [r1, #40]	; 0x28
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	025b      	lsls	r3, r3, #9
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fec:	4931      	ldr	r1, [pc, #196]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	492d      	ldr	r1, [pc, #180]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f023 0220 	bic.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4928      	ldr	r1, [pc, #160]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <RCCEx_PLL2_Config+0x160>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	69d2      	ldr	r2, [r2, #28]
 800402e:	00d2      	lsls	r2, r2, #3
 8004030:	4920      	ldr	r1, [pc, #128]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f043 0310 	orr.w	r3, r3, #16
 8004040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800404e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004054:	e00f      	b.n	8004076 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d106      	bne.n	800406a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800405c:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004068:	e005      	b.n	8004076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004074:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004076:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004082:	f7fc fcef 	bl	8000a64 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004088:	e008      	b.n	800409c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800408a:	f7fc fceb 	bl	8000a64 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e006      	b.n	80040aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
 80040b8:	ffff0007 	.word	0xffff0007

080040bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d101      	bne.n	80040da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e099      	b.n	800420e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040da:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a4e      	ldr	r2, [pc, #312]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fc fcbd 	bl	8000a64 <HAL_GetTick>
 80040ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ec:	e008      	b.n	8004100 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ee:	f7fc fcb9 	bl	8000a64 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e086      	b.n	800420e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004100:	4b45      	ldr	r3, [pc, #276]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800410c:	4b42      	ldr	r3, [pc, #264]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	493f      	ldr	r1, [pc, #252]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	628b      	str	r3, [r1, #40]	; 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	3b01      	subs	r3, #1
 8004126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	3b01      	subs	r3, #1
 8004130:	025b      	lsls	r3, r3, #9
 8004132:	b29b      	uxth	r3, r3
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	3b01      	subs	r3, #1
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004150:	4931      	ldr	r1, [pc, #196]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	492d      	ldr	r1, [pc, #180]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4928      	ldr	r1, [pc, #160]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4a26      	ldr	r2, [pc, #152]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <RCCEx_PLL3_Config+0x160>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	69d2      	ldr	r2, [r2, #28]
 8004192:	00d2      	lsls	r2, r2, #3
 8004194:	4920      	ldr	r1, [pc, #128]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800419a:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	4a19      	ldr	r2, [pc, #100]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041b8:	e00f      	b.n	80041da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041c0:	4b15      	ldr	r3, [pc, #84]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041cc:	e005      	b.n	80041da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a11      	ldr	r2, [pc, #68]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fc fc3d 	bl	8000a64 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ec:	e008      	b.n	8004200 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041ee:	f7fc fc39 	bl	8000a64 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
 800421c:	ffff0007 	.word	0xffff0007

08004220 <__libc_init_array>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	4d0d      	ldr	r5, [pc, #52]	; (8004258 <__libc_init_array+0x38>)
 8004224:	4c0d      	ldr	r4, [pc, #52]	; (800425c <__libc_init_array+0x3c>)
 8004226:	1b64      	subs	r4, r4, r5
 8004228:	10a4      	asrs	r4, r4, #2
 800422a:	2600      	movs	r6, #0
 800422c:	42a6      	cmp	r6, r4
 800422e:	d109      	bne.n	8004244 <__libc_init_array+0x24>
 8004230:	4d0b      	ldr	r5, [pc, #44]	; (8004260 <__libc_init_array+0x40>)
 8004232:	4c0c      	ldr	r4, [pc, #48]	; (8004264 <__libc_init_array+0x44>)
 8004234:	f000 f820 	bl	8004278 <_init>
 8004238:	1b64      	subs	r4, r4, r5
 800423a:	10a4      	asrs	r4, r4, #2
 800423c:	2600      	movs	r6, #0
 800423e:	42a6      	cmp	r6, r4
 8004240:	d105      	bne.n	800424e <__libc_init_array+0x2e>
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	f855 3b04 	ldr.w	r3, [r5], #4
 8004248:	4798      	blx	r3
 800424a:	3601      	adds	r6, #1
 800424c:	e7ee      	b.n	800422c <__libc_init_array+0xc>
 800424e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004252:	4798      	blx	r3
 8004254:	3601      	adds	r6, #1
 8004256:	e7f2      	b.n	800423e <__libc_init_array+0x1e>
 8004258:	080042a0 	.word	0x080042a0
 800425c:	080042a0 	.word	0x080042a0
 8004260:	080042a0 	.word	0x080042a0
 8004264:	080042a4 	.word	0x080042a4

08004268 <memset>:
 8004268:	4402      	add	r2, r0
 800426a:	4603      	mov	r3, r0
 800426c:	4293      	cmp	r3, r2
 800426e:	d100      	bne.n	8004272 <memset+0xa>
 8004270:	4770      	bx	lr
 8004272:	f803 1b01 	strb.w	r1, [r3], #1
 8004276:	e7f9      	b.n	800426c <memset+0x4>

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr
